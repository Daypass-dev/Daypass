import { Button, Flex, Heading } from "@chakra-ui/react";
import Head from "next/head";
import WalletLayout from "./user/wallet/WalletLayout";
import { useAccount } from "wagmi";
import { getZeroDevSigner, getSocialWalletOwner } from "@zerodevapp/sdk";
import nftArtifact from "../contracts/Hackathon721.sol/Hackathon721.json";

import { GoogleSocialWallet } from "@zerodevapp/social-wallet";
import { useEffect, useState } from "react";
import { Contract, providers } from "ethers";
import { Interface } from "ethers/lib/utils.js";
import { PaymasterAPI } from "@account-abstraction/sdk";
import { UserOperationStruct } from "@account-abstraction/contracts";

const NFT_CONTRACT_ADDRESS = "0x5a89d913b098c30fcb34f60382dce707177e171e";
const PAYMASTER_ADDRESS = "0x38A310a0D9a015d23B973478c1EF961C3e44Ee62"; // paymaster with whitelisted addresses, latest version
class contractOnlyPaymaster extends PaymasterAPI {
  async getPaymasterAndData(
    userOp: Partial<UserOperationStruct>
  ): Promise<string> {
    return PAYMASTER_ADDRESS;
  }
}

// Gas before on the plain paymaster 1061069010183180134
// 1060664411159720024

export default function Home() {
  const { address } = useAccount();
  const [isLoading, setIsLoading] = useState(false);

  const walletTesting = async () => {
    setIsLoading(true);
    try {
      const socialWallet = new GoogleSocialWallet();

      const signer = await getZeroDevSigner({
        projectId: process.env.NEXT_PUBLIC_ZERO_DEV_PROJECT_ID!,
        owner: await getSocialWalletOwner(
          process.env.NEXT_PUBLIC_ZERO_DEV_PROJECT_ID!,
          socialWallet
        ),
      });
      signer.smartAccountAPI.paymasterAPI = new contractOnlyPaymaster();

      console.log("Hey here's the signer, wtf is happening");
      console.log(signer);

      const contract = new Contract(
        NFT_CONTRACT_ADDRESS,
        new Interface(nftArtifact.abi),
        signer
      );

      const txn: providers.TransactionResponse = await contract.mint(1);
      console.log("Here's the transaction response");
      console.log(txn);

      const receipt = await txn.wait();
      console.log("Here's the transaction receipt");
      console.log(receipt);
      setIsLoading(false);
    } catch (e) {
      console.log("hey there was an error");
      console.log(e);
      setIsLoading(false);
    }
  };

  useEffect(() => {
    console.log(
      `Hey, the address state is changing here's the new value ${address}`
    );
  }, [address]);

  return (
    <>
      <WalletLayout>
        {address && <div> connected! </div>}
        <Flex justifyContent="center" alignItems="stretch" flexDir="column">
          <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <Heading>Home Page Content</Heading>
          <Button onClick={walletTesting}>
            {isLoading ? "Loading" : "Mint an NFT with this account!"}
          </Button>
        </Flex>
      </WalletLayout>
    </>
  );
}
