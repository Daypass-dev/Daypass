import { Button, Flex, Heading, Text } from "@chakra-ui/react";
import { Image as ChakraImage } from '@chakra-ui/image';
import Head from "next/head";
import WalletLayout from "./user/wallet/WalletLayout";
import { useAccount } from "wagmi";
import { getZeroDevSigner, getSocialWalletOwner } from "@zerodevapp/sdk";
import nftArtifact from "../contracts/Hackathon721.sol/Hackathon721.json";

import { GoogleSocialWallet } from "@zerodevapp/social-wallet";
import { useEffect, useState } from "react";
import { Contract, providers } from "ethers";
import { Interface } from "ethers/lib/utils.js";
import { PaymasterAPI } from "@account-abstraction/sdk";
import { UserOperationStruct } from "@account-abstraction/contracts";
import {
  ConnectButton,
} from "@rainbow-me/rainbowkit";

const NFT_CONTRACT_ADDRESS = "0x5a89d913b098c30fcb34f60382dce707177e171e";
const PAYMASTER_ADDRESS = "0x38A310a0D9a015d23B973478c1EF961C3e44Ee62"; // paymaster with whitelisted addresses, latest version
class contractOnlyPaymaster extends PaymasterAPI {
  async getPaymasterAndData(
    userOp: Partial<UserOperationStruct>
  ): Promise<string> {
    return PAYMASTER_ADDRESS;
  }
}
export default function Home() {
  const { address, isConnected } = useAccount();
  const [isLoading, setLoading] = useState(false);
  const [buttenErrorText, setButtonErrorText] = useState("")
  const [mintSuccesful, setMintSuccesful] = useState(false);
  const mint = async () => {
    try {
      setLoading(true);
      const socialWallet = new GoogleSocialWallet();

      const signer = await getZeroDevSigner({
        projectId: process.env.NEXT_PUBLIC_ZERO_DEV_PROJECT_ID!,
        owner: await getSocialWalletOwner(
          process.env.NEXT_PUBLIC_ZERO_DEV_PROJECT_ID!,
          socialWallet
        ),
      });
      signer.smartAccountAPI.paymasterAPI = new contractOnlyPaymaster();

      const contract = new Contract(
        NFT_CONTRACT_ADDRESS,
        new Interface(nftArtifact.abi),
        signer
      );

      const txn: providers.TransactionResponse = await contract.mint(1);
      const receipt = await txn.wait();
      console.log(receipt);
      setLoading(false);
      setMintSuccesful(true);
    } catch (e) {
      console.log("hey there was an error");
      console.log(e);
      setLoading(false);
      setButtonErrorText("Failed to mint! Retry.");
    }
  };

  useEffect(() => {
    console.log("Walelt changed!")
    // Clear all errors
    setButtonErrorText("")
  }, [address, isConnected])

  return (
    <>

      <div className="background-image">
        <WalletLayout >
          {address && <div> connected! </div>}
          <Flex justifyContent="center" alignItems="center" flexDir="row">
            <Flex justifyContent="center" alignItems="stretch" flexDir="column">
              <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
              </Head>
              {!isConnected ? <>
                <Heading
                  fontFamily="'Poppins', sans-serif"
                  fontStyle="normal"
                  fontWeight="700"
                  fontSize="40px"
                  lineHeight="101%"
                  letterSpacing="-0.022em"
                  color="#FFFFFF"
                  width="50vw"
                >
                  Space Cans Collections
                </Heading>
                <Text
                  fontFamily="'Poppins', sans-serif"
                  fontStyle="normal"
                  fontWeight="hairline"
                  fontSize="18px"
                  lineHeight="18px"
                  color="#FFFFFF"
                  width="50vw"
                  marginTop="1rem"
                >
                  Space Cans is an NFT collection that features unique and playful 3D illustrations of soda
                  cans floating in outer space. Each can has its own distinct personality and is ready to
                  conquer the universe.
                </Text>
              </> : <></>}
              <Flex paddingTop="1vh">
                {isConnected == true ? <></> : <ConnectButton />}
              </Flex>
            </Flex>

            {isConnected == true ?
              <Flex direction="column" alignItems="center">
                <ChakraImage src="space-can-main.jpeg" alt="Your Image" maxHeight="30vw" />
                <Button bg="#FF44EC" onClick={mint} marginTop="2vh" width="30vw">{isLoading == false ?
                  buttenErrorText === "" ? "mint" : buttenErrorText
                  : "loading"
                }</Button>
              </Flex> : <></>}
            {mintSuccesful == true ?
              <Flex direction="column" paddingLeft="5vw">
                <Heading
                  fontFamily="'Poppins', sans-serif"
                  fontStyle="normal"
                  fontWeight="700"
                  fontSize="40px"
                  lineHeight="101%"
                  letterSpacing="-0.022em"
                  color="#FFFFFF"
                  width="50vw"
                >
                  Your minted your first Space Can!
                </Heading>
                <Text
                  fontFamily="'Poppins', sans-serif"
                  fontStyle="normal"
                  fontWeight="hairline"
                  fontSize="18px"
                  lineHeight="18px"
                  color="#FFFFFF"
                  width="50vw"
                  marginTop="1rem"
                >
                  You can check the transaction details in the blockchain explorer.
                </Text>
                <Button width="30vw" bg="#FF44EC" marginTop="1rem"> See in Explorer </Button>
              </Flex> : <></>}
          </Flex>
        </WalletLayout>

        <style jsx>{`
            .background-image {
              background-image: url('mint-main-bg.png');
              background-position: center;
              background-repeat: no-repeat;
              background-size: cover;
              width: 100%;
              height: 100vh;
            }
            .vector-text {
              position: absolute;
              top: 0;
              left: 0;
              display: flex;
              align-items: center;
              padding: 1rem;
            }
        
            .vector-text img {
              margin-right: 0.5rem;
              height: 50px;
            }
          `}</style>
      </div>
    </>
  );
}