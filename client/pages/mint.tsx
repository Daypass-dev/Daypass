import { Button, Flex, Heading, Input, Text } from "@chakra-ui/react";
import Head from "next/head";
import WalletLayout from "./user/wallet/WalletLayout";
import { useAccount } from "wagmi";
import { getZeroDevSigner, getSocialWalletOwner } from "@zerodevapp/sdk";
import nftArtifact from "../contracts/Hackathon721.sol/Hackathon721.json";

import { GoogleSocialWallet } from "@zerodevapp/social-wallet";
import { useEffect, useState } from "react";
import { Contract, providers } from "ethers";
import { Interface } from "ethers/lib/utils.js";
import { PaymasterAPI } from "@account-abstraction/sdk";
import { UserOperationStruct } from "@account-abstraction/contracts";
import Link from "next/link";

const NFT_CONTRACT_ADDRESS = "0x38853627cadCB75B7537453b12bFc2AB6eE16E23";
// const PAYMASTER_ADDRESS = "0xF66b5E3Cb034391d44E09365A2150a5E60a9c53d"; // paymaster with whitelisted addresses, latest version

class contractOnlyPaymaster extends PaymasterAPI {
  public address: string;

  constructor(address: string) {
    super();
    this.address = address;
  }

  async getPaymasterAndData(
    userOp: Partial<UserOperationStruct>
  ): Promise<string> {
    return this.address;
  }
}

export default function Home() {
  const { address } = useAccount();
  const [isLoading, setIsLoading] = useState(false);
  const [mintingErrorMessage, setErrorMessage] = useState("");
  const [transactionHash, setTransactionHash] = useState(undefined);

  const [paymasterAddress, setpaymasterAddress] = useState("");
  const handleChange = (event: any) => setpaymasterAddress(event.target.value);

  const mint = async () => {
    setIsLoading(true);
    try {
      console.log("trying to mint..");
      const socialWallet = new GoogleSocialWallet();

      const signer = await getZeroDevSigner({
        projectId: process.env.NEXT_PUBLIC_ZERO_DEV_PROJECT_ID!,
        owner: await getSocialWalletOwner(
          process.env.NEXT_PUBLIC_ZERO_DEV_PROJECT_ID!,
          socialWallet
        ),
      });
      signer.smartAccountAPI.paymasterAPI = new contractOnlyPaymaster(
        paymasterAddress
      );

      const contract = new Contract(
        NFT_CONTRACT_ADDRESS,
        new Interface(nftArtifact.abi),
        signer
      );

      const txn: providers.TransactionResponse = await contract.mint(1);
      setTransactionHash(txn.hash as any);
      const receipt = await txn.wait();
      setIsLoading(false);
    } catch (e) {
      console.log(e);
      setErrorMessage("Minting Failed. Retry");
      setIsLoading(false);
    }
  };

  useEffect(() => {
    console.log(
      `Hey, the address state is changing here's the new value ${address}`
    );
    setErrorMessage("");
  }, [address]);

  return (
    <>
      <WalletLayout>
        <Flex
          justifyContent="center"
          alignItems="center"
          flexDir="column"
          width="100%"
          height="100vh"
        >
          <Head>
            <title>Demo Mint Site</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <Heading>Space Can NFT Collection</Heading>

          <Input
            value={paymasterAddress}
            onChange={handleChange}
            placeholder="Paymaster Address"
            mt="48px"
            mb="24px"
          />
          <Button onClick={mint} disabled={true}>
            {isLoading
              ? "Minting in progress..."
              : mintingErrorMessage !== ""
              ? mintingErrorMessage
              : "Mint NFT"}
          </Button>
          {transactionHash ? (
            <Link
              href={`https://www.jiffyscan.xyz/userOpHash/${transactionHash}?network=goerli`}
              passHref
            >
              <Button as="a">Go to target page</Button>
            </Link>
          ) : (
            <></>
          )}
        </Flex>
      </WalletLayout>
    </>
  );
}
